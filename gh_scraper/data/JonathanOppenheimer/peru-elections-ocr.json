{"description": null, "readme": "# OCR Signature Detection Project\n\nThis project focuses on detecting and counting handwritten signatures from specific areas on standardized Peru ONPE election records (Actas). The system processes PDF documents containing multiple signature boxes across different pages, using advanced image processing and OCR techniques to accurately detect signatures and extract relevant metadata such as table numbers and document types.\n\n## Table of Contents\n1. [Project Structure](#project-structure)\n2. [Installation](#installation)\n3. [Usage](#usage)\n4. [Configuration](#configuration)\n5. [Template System](#template-system)\n6. [Image Processing Techniques](#image-processing-techniques)\n7. [Contributing](#contributing)\n8. [License](#license)\n\n---\n\n## Project Structure\n\n```\n.\n\u251c\u2500\u2500 config/                    # Configuration files\n\u2502   \u2514\u2500\u2500 secret.json            # API keys and credentials\n\u251c\u2500\u2500 data/                     # Data directory\n\u2502   \u251c\u2500\u2500 input/               # Input PDFs for processing\n\u2502   \u2502   \u2514\u2500\u2500 testing/        # Test PDF files\n\u2502   \u251c\u2500\u2500 downloaded_pdfs/     # PDFs downloaded from Dropbox\n\u2502   \u2514\u2500\u2500 output/              # Processing results\n\u2502       \u2514\u2500\u2500 csv/            # CSV output files\n\u251c\u2500\u2500 src/                      # Source code\n\u2502   \u251c\u2500\u2500 ocr/                 # OCR-related modules\n\u2502   \u2502   \u251c\u2500\u2500 __init__.py\n\u2502   \u2502   \u251c\u2500\u2500 ocr_signature_detection.py  # Main signature detection logic\n\u2502   \u2502   \u251c\u2500\u2500 template_generation.py      # Template generation utilities\n\u2502   \u2502   \u2514\u2500\u2500 time_extraction.py          # Time extraction functionality\n\u2502   \u2514\u2500\u2500 utils/               # Utility modules\n\u2502       \u251c\u2500\u2500 __init__.py\n\u2502       \u2514\u2500\u2500 dropbox_downloader.py  # Dropbox integration\n\u251c\u2500\u2500 templates/                # Template files\n\u2502   \u2514\u2500\u2500 erm/                 # ERM template directory\n\u2502       \u251c\u2500\u2500 bounding_boxes.json     # Box coordinates\n\u2502       \u251c\u2500\u2500 empty_numobs1.png       # Empty signature templates\n\u2502       \u251c\u2500\u2500 empty_numobs2.png\n\u2502       \u2514\u2500\u2500 empty_numobs3.png\n\u251c\u2500\u2500 main.py                   # Main entry point\n\u251c\u2500\u2500 setup.py                  # Package installation\n\u251c\u2500\u2500 requirements.txt          # Project dependencies\n\u2514\u2500\u2500 README.md                # Project documentation\n```\n\n## Installation\n\nTo set up this project locally, follow these steps:\n\n### 1. Clone the Repository\nFirst, clone the repository to your local machine:\n```bash\ngit clone https://github.com/JonathanOppenheimer/peru-elections-ocr\ncd peru-elections-ocr\n```\n\n### 2. Set Up a Virtual Environment (Optional but recommended)\nCreate a virtual environment to isolate the project's dependencies:\n```bash\npython3 -m venv .venv\nsource .venv/bin/activate  # On Windows, use .venv\\Scripts\\activate\n```\n\n### 3. Install Package\nInstall the package in development mode:\n```bash\npip install -e .\n```\n\n### 4. Install Required System Dependencies\n\n#### Install Tesseract OCR:\n\n- **macOS**: \n  ```bash\n  brew install tesseract\n  ```\n\n- **Ubuntu/Debian**:\n  ```bash\n  sudo apt install tesseract-ocr\n  ```\n\n- **Windows**:\n  Download and install Tesseract from [here](https://github.com/tesseract-ocr/tesseract/wiki).\n\n#### Install Poppler:\n\nPoppler is required for PDF processing. Install it as follows:\n\n- **macOS**:\n  ```bash\n  brew install poppler\n  ```\n\n- **Ubuntu/Debian**:\n  ```bash\n  sudo apt-get install poppler-utils\n  ```\n\n- **Windows**:\n  1. Download the latest binary from [here](http://blog.alivate.com.au/poppler-windows/)\n  2. Extract to a folder (e.g., `C:\\Program Files\\poppler-xx\\`)\n  3. Add the bin folder to your system PATH\n\n### 5. Verify Installation\nTo verify that everything is installed correctly, try running the example script:\n```bash\npython ocr_signature_detection.py\n```\n\n---\n\n## Usage\n\n### Basic Usage\n\n1. Configure your environment:\n   ```bash\n   # Set up config/secret.json with your credentials\n   {\n     \"dropbox_access_token\": \"your_access_token\",\n     \"dropbox_shared_url\": \"your_shared_folder_url\"\n   }\n   ```\n\n2. Run the main script:\n   ```bash\n   python main.py\n   ```\n\n3. For processing a specific folder of PDFs:\n   ```python\n   from src.ocr import process_folder\n   \n   process_folder(\n       input_folder=\"data/input/testing\",\n       empty_template_paths={\n           \"numobs1\": \"templates/erm/empty_numobs1.png\",\n           \"numobs2\": \"templates/erm/empty_numobs2.png\",\n           \"numobs3\": \"templates/erm/empty_numobs3.png\"\n       },\n       csv_output_path=\"data/output/csv/results.csv\",\n       bounding_boxes_path=\"templates/erm/bounding_boxes.json\"\n   )\n   ```\n\n### Output Format\n\nThe program generates a CSV file with the following columns:\n- `table_number`: Extracted table number from the document\n- `document_type`: Type of the document (extracted via OCR)\n- `numobs1`: Number of signatures detected in the first observation box\n- `numobs2`: Number of signatures detected in the second observation box\n- `numobs3`: Number of signatures detected in the third observation box\n\n\n## Configuration\n\n### Bounding Boxes Configuration\n\nThe `bounding_boxes.json` file defines the regions of interest for signature detection and metadata extraction:\n\n```json\n{\n    \"numobs1\": {\n        \"left_pct\": 0.1,\n        \"top_pct\": 0.2,\n        \"right_pct\": 0.3,\n        \"bottom_pct\": 0.4,\n        \"grid\": {\n            \"rows\": 3,\n            \"columns\": 2\n        }\n    },\n    \"mesa_sufragio\": {\n        \"left_pct\": 0.5,\n        \"top_pct\": 0.1,\n        \"right_pct\": 0.7,\n        \"bottom_pct\": 0.15\n    }\n}\n```\n\nEach box is defined by:\n- Percentage-based coordinates (`left_pct`, `top_pct`, `right_pct`, `bottom_pct`)\n- Optional grid configuration for signature boxes\n- Optional ROI (Region of Interest) for specific areas within boxes\n\n## Template System\n\nThe project uses a template-based approach for signature detection:\n\n### Template Generation\n\nTemplates can be generated using the template generation utility:\n\n```bash\npython -m src.ocr.template_generation\n```\n\nThis will:\n1. Process an empty form PDF\n2. Extract signature box regions\n3. Generate preprocessed templates for each box type\n4. Save templates in the specified output directory\n\n### Template Matching\n\n---\n\n## Image Processing Techniques\n\nThis project leverages several image processing techniques to reliably detect signatures within predefined regions of interest (bounding boxes). Below is a brief explanation of the techniques used:\n\n### 1. **Grayscale Conversion**\nImages are converted from RGB to grayscale. This helps simplify the image and reduces the complexity for further processing. Grayscale conversion is useful for working with binary thresholding and other pixel intensity-based techniques.\n\n### 2. **Median Blurring**\nWe apply a **median blur** to the image, which is particularly useful for reducing noise (like ink spots or specks of dust). This type of blur helps remove salt-and-pepper noise while preserving the edges of the content (like handwritten signatures).\n\n### 3. **Otsu's Thresholding**\nOtsu's method is an automatic thresholding technique that determines the optimal threshold value to convert the grayscale image into a binary image (black and white). This is critical for differentiating between the background and the actual signatures.\n\n### 4. **Structural Similarity Index (SSIM)**\nFor signature detection, we use the **SSIM** algorithm to compare each signature box with a predefined empty template. SSIM measures the similarity between two images and helps us identify whether a signature is present in a given box. If the similarity score falls below a certain threshold, we assume a signature is present.\n\n---\n\n## Contributing\n\nContributions are welcome! Please follow these steps:\n1. Fork the repository\n2. Create a feature branch\n3. Make your changes\n4. Submit a pull request\n\nFor major changes, please open an issue first to discuss the proposed changes.\n\n## License\n\nThis project is licensed under the MIT License - see the [LICENSE](LICENSE) file for details.\n\n---\n\n### Additional Notes\n\n- **Template Quality**: The quality of signature detection heavily depends on the templates used. Ensure templates are generated from clean, empty forms.\n- **Performance Tuning**: Adjust the SSIM threshold in `template_match_signature_area()` if experiencing false positives/negatives.\n- **Batch Processing**: For large datasets, use the batch processing feature with appropriate batch sizes to optimize memory usage.\n\n", "prev_commits": ["name cleaning", "expand text search box for type", "add multiprocessing back'", "add support for multiple different doc types", "Add support for type box", "restructure for input/output", "add util for removal", "add file paths", "strip leading 0s", "add file dif script", "turn off ocr for acta nums", "turn off debug mode", "fix time commenting out", "add new requirements", "optimize pdf processing", "add rate limits", "add parallel dropbox downloads", "fix dropbox script so it downloads all files", "Complete setup.py", "update readme", "fix readme structure", "align readme", "reorganize project", "Add support for different PDF types through more extensive templating and configuration; also add dropbox download", "add batch processing", "improve acta number extraction", "Merge branch 'main' of https://github.com/JonathanOppenheimer/peru-elections-ocr", "try to extract start and end times, refactor/enhance", "Update README.md", "remove written instructions", "publish first draft", "Initial commit"], "title": "peru-elections-ocr", "owner": "JonathanOppenheimer", "commits": 32}