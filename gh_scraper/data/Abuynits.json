{
    "project_data": [
        [
            {
                "title": "Gesture Controlled HCI",
                "technologies": [
                    "Pytorch",
                    "Flask",
                    "MongoDB"
                ],
                "dates": "Jan 2024 - Mar 2024",
                "description": "Built a continuous learning model to detect hand poses at 30FPS allowing for customizable hand poses. Categorized hand gestures through VLLMs and vector databases and created custom actions using open-interpreter."
            },
            {
                "description": "Processes an image of cards, finding the cards and the numbers themselves.",
                "readme": null,
                "prev_commits": [
                    "removed extra files",
                    "updated the code, removed extra files",
                    "created AI model and integrated it with the rest of the code",
                    "added the ability to store a 2d grey scale array in rectangle",
                    "can locate box around number and loop over it, producing an array of numbers that correspond to the black and white pixel values",
                    "can now loop over the pixels around the number, getting the greyscale values",
                    "started on making basic game functionality",
                    "can find points that surround the number based on scales",
                    "reliably locate top left corner, working rotational matrices",
                    "changed rectangle detection to use min area",
                    "contour rectangle recognition functional. Center location is found. TODO: perform Affline transform",
                    "started basic test classification",
                    "made basic image classification",
                    "first commit"
                ],
                "title": "cardReader",
                "owner": "abuynits",
                "commits": 14
            },
            "tbd",
            4,
            "Reasoning: The candidate's contributions demonstrate a substantial understanding of the project requirements, and the git log reflects a clear effort in developing the project over time. While there is a significant initial commit, the subsequent commits show incremental changes and the creation of meaningful components like `Main.py`, `OCR_model.py`, and `image_processing.py`, indicating original work. However, without additional commits that further demonstrate complexity or problem-solving skills, there could be some concerns about the magnitude of changes versus the candidate's claims in their resume. Overall, the majority of the code appears original, yet there\u2019s room for questioning the depth of involvement based on the commits provided."
        ],
        [
            {
                "title": "Robotics Mini-Projects",
                "technologies": [
                    "Pytorch",
                    "Gazebo",
                    "Pybullet",
                    "ROS"
                ],
                "dates": "Jan 2024 - May 2024",
                "description": "Implemented (bi)RRT, (bi)RRTConnect, RRT* for cars and 6-DOF arms; Iterative/Analytic PID for Quadruped robots and 2-DOF arms; MPNet in 2D/3D environments; VPG for 2-DOF arm."
            },
            {
                "description": "A competition to inspire solutions for autonomous systems through IRL rocket league.",
                "readme": "# Rocket League\nThis repo contains all the files necessary for the [Rocket League project](https://wiki.purduearc.com/wiki/rocket-league/overview).\nThis project aims to recreate the video game of the same name via a team of\nautonomously controlled RC cars competing against human controlled ones.\n\nThe repo is broken down into several ROS packages, closely matching the system outline:\n\n![System outline](https://wiki.purduearc.com/wiki/rocket-league/assets/images/system-overview.png)\n\n### rktl_autonomy\nThis package contains all code for the \"High Level Planner\" section. It provides\nan interface between ROS and OpenAI Gym, and is therefore capable of running a\ndeep reinforcement learning agent capable of controlling the car.\n\nFor further information see its specific [`README.md`](rktl_autonomy/README.md) file.\n\n### rktl_planner\nThis package contains the \"Mid Level Software\" group. It provides an alternative\nmethod to the `rktl_autonomy` stack to control the car.\n\nFor further information see its specific [`README.md`](rktl_planner/README.md) file.\n\n### rktl_control\nThis package performs several jobs that allow it to move physical cars according\nto commands from either the planning or autonomy code.\n\nSpecifically it has three main components:\n- It filters the raw perception data using either a moving average filter or a\nparticle filter, while also producing estimated odometry (which includes velocity\nin addition to the position given by the raw perception data)\n- It has a closed loop controller which reduces the error between the desired and\nestimated motion of the car by producing control signals.\n- It has a hardware interface, which sends those control signals to the physical cars.\n\nIt also contains several MATLAB scripts that are useful in tuning and validating\nthe Python code used for this project.\n\nFor further information see its specific [`README.md`](rktl_control/README.md) file.\n\n### rktl_perception\nThis package contains the \"Perception\" code. This interfaces with cameras, processes\nthe data, and outputs position estimates for all physical elements on the field.\n\nFor further information see its specific [`README.md`](rktl_perception/README.md) file.\n\n### rktl_sim\nThis contains a simulator, which is used to train the autonomy code.\n\nFor further information see its specific [`README.md`](rktl_sim/README.md) file.\n\n### rktl_msgs\nThis contains custom ROS messages for the project.\n\n### rktl_launch\nThis contains several convenience launch files for running several packages at once.\n\n## Additional Folders / Files\n### docker\nThis contains scripts for building and running the Docker environment used for the project.\nFor more information, see the below **Building and Running the Project** section.\n\n### .github\nThis contains GitHub actions used for continuous integration. Primarily, it automates:\n- building the development Docker container\n- running automated tests on PRs and pushes to main\n\n### start.py\nThis contains a Python script used to launch the production system on the computer\ncart. It launches Docker containers on multiple computers (defined in `hosts.yaml`),\nand launches the necessary ROS nodes inside of them.\n\n## Building and Running the Project\n### Pre-Requisites\nThis project is built on [ROS (Robot Operating System)](https://www.ros.org/)\nYou should be familiar with using ROS on Linux inside Docker through previous\nexperience, or by following our super cool [tutorials](https://wiki.purduearc.com/wiki/tutorials/ros).\n\nThe project runs inside a development Docker container, so the host machine only\nneeds to be able to run Docker. All software pre-requisites are installed in the\nimage.\n\n### Building\nFirst, make sure your code is in the proper place. There is a specific directory\nstructure required, which is:\n```\ncatkin_ws\n -> src\n     -> rocket_league (this repo)\n```\n\nStarting from scratch in the parent directory for `catkin_ws`, run:\n```\nmkdir -p catkin_ws/src\ncd catkin_ws/src\ngit clone git@github.com:purdue-arc/rocket_league.git\n```\n> You should have a different catkin workspace for each project, so if you already\nuse ROS for something else (other than the ARC tutorials), you should name the\nworkspace something different such as `arc_ws` or `rktl_ws`.\n\nRun all future commands inside the `rocket_league` folder.\n\nFirst, pull a mostly built Docker container, and customize it for your machine:\n```\n./docker/docker-build.sh\n```\n\nNext, launch the Docker container:\n```\n./docker/docker-run.sh\n```\nYour terminal will be transported into the container. The directory `~/catkin_ws`\ninside the container is mapped to the workspace wherever you put it, and whatever\nyou named it outside the container. Changes in here are permanent when the container\nexist, but installing software and other actions are all isolated from your main\ncomputer and will be lost when you exit the container.\n\nFinally, build the code:\n```\ncd catkin_ws\ncatkin build\n```\n\nOptionally, run the automated tests:\n```\ncatkin test\n```\n\n### Running\n> This resumes where **Building** left off, so run all these commands in the\ncontainer, not your host computer\n\nTo run the project's simulator and visualizer, run:\n```\nroslaunch rktl_launch rocket_league_sim.launch\n```\n\nTo manually give the car input, run:\n```\nroslaunch rktl_control keyboard_control.launch\n```\n> This must be done while the first command is still running. You can either:\n> - run `./docker/docker-join.sh` in another terminal on your host machine to\ntransport that terminal into the same container\n> - use `CTRL+Z` and `bg` to push the current process into the background, so that\nyou can run another command. (use `fg` to bring it back into the foreground)\n> - use [`tmux`](https://tmuxcheatsheet.com/) to have multiple terminals inside one\n\nTo stop the current process, type `CTRL+C`.\nTo exit the container, simply type `exit` or `CTRL+D`.\n",
                "prev_commits": [
                    "tested out the randomization of parameters.need to update callback functions",
                    "found problem with bad cmd",
                    "aded debug print",
                    "added debug messages: problem: 0 velocity in car",
                    "udpated sim",
                    "fixed overlap generations of cars",
                    "Merge branch 'main' into sim-refactor",
                    "added debug print, fixed math.random call",
                    "added print statements, fixed bad math sqrt call",
                    "final changes",
                    "no more momments with compilation",
                    "fixed moment with indent, fixed other bugs",
                    "fixed errors with invalid access and checking in hashmap",
                    "fixed error with fetching dictionary",
                    "fixed bugs with bad param naming, identified future bug with attempt to fix with try catch",
                    "refactored the reset function",
                    "reworked reset fucntion and create_cb / delete_cb functions, saving work",
                    "refactored car.py",
                    "fixed bug in bad function call, reworked comments and swapped out reset_cb",
                    "changed the reset_cb function to have an empty param. removed the current =true parameter",
                    "added the configuration function back as it is called by the sim.py",
                    "added comments for car.py",
                    "added better comments and documentation",
                    "undid bad formating",
                    "fixed comments and added better documentation",
                    "worked through comments and changes for these file",
                    "removed generate_car_properties function to reset_cb",
                    "added two more callback functions: delete and create all cars. might be useful for the user...",
                    "simulator node rebuild:",
                    "added params for resetting the ball and passing in velocity and position",
                    "fixed comments",
                    "fixed comments",
                    "fixed grammer, punctuation, capitalization, cleaned and clarified variable names",
                    "added second paramter to get_sim_param, calling all rospy.getparam with this updatead function",
                    "reformated comments, removed confusing comment"
                ],
                "title": "rocket_league_sim_refactoring",
                "owner": "abuynits",
                "commits": 35
            },
            "tbd",
            1,
            "Reasoning: The repository shows signs of significant external dependencies, including a reliance on numerous libraries, frameworks, and integrations with ROS. The candidate's resume claims extensive implementation of algorithms and methods, but the commits reflect a focus on infrastructure and minimal algorithmic modifications. There are substantial initial commits that likely include bundled libraries or templates, followed by a dearth of contributions suggesting meaningful development. Overall, the evidence points to potential embellishment of claims relative to actual contributions."
        ],
        [
            {
                "title": "1st Place Purdue BoilerMake X Hackathon Dagshub",
                "technologies": [
                    "Pytorch",
                    "MLFlow",
                    "DVC",
                    "Dagshub"
                ],
                "dates": "Jan 2023",
                "description": [
                    "Used seq2seq model to study key factors affecting air quality.",
                    "Created a robust, modular testing environment for time-series forecasting with any data through MLFlow, DVC, and git using DagsHub."
                ]
            },
            {
                "description": "A standardized, trackable, testing project framework to study the effects of external economic indicators on model prediction using DVC and MLFlow",
                "readme": null,
                "prev_commits": [
                    "Update README.md",
                    "added stanley data 2",
                    "added stanley data",
                    "fixed data_prep",
                    "how did i miss 4/6 T/F q's on analysis? I could have turned brain off and done better",
                    "i drank so much coffee i can smell colors",
                    "what if I added semicolons at the end of each line in python?",
                    "did more work on tft",
                    "added forward method to transformer",
                    "my bran isnt work. how make bran work? i tried coffee. not work. tried redbull a few times. also not work.. what else?",
                    "added quantile loss",
                    "i have turned on light mode bc im touching grass. finished var selection nn and modified GRN",
                    "i have need too much nn.modules for one day (finished interpretability MHA)",
                    "added GRN",
                    "final data_parser changes",
                    "feat: streamlined data_parser",
                    "ecn results: worse than seq2seq",
                    "i have read attention is all you need 4 times and MHA is still not making sense",
                    "added csv file to git",
                    "stop tracking data/results.csv",
                    "minor esn print changes",
                    "added deepesn architecture for prediction",
                    "deepESN working",
                    "Merge branch 'master' of https://github.com/Abuynits/TE_Connect",
                    "more work on res / esn model",
                    "added results file",
                    "82% overall accuracy on all product codes",
                    "fixed bug in eval module",
                    "added more fixes to esn model",
                    "fixed saving big",
                    "added comments for deep-esn code",
                    "feat: fixed all typo bugs in deep_esn",
                    "feat: minor changes to fix data eval",
                    "fixed bug in data processing, made progress esn debug",
                    "added accuracy calculation on a monthly basis - works"
                ],
                "title": "TE_Connect",
                "owner": "abuynits",
                "commits": 35
            },
            "tbd",
            4,
            "Reasoning: The candidate has demonstrated a significant amount of original work throughout the repository. The git log exhibits consistent and meaningful contributions, although there seems to be a heavy initial setup phase with many files added at once. However, the descriptions and subsequent modifications indicate a depth of understanding of the project's requirements, both in development and documentation. Nonetheless, as there are many new files added in a single commit without clear progression on complex functionalities, there is some suspicion of rushed work or initial template-based setups, preventing a perfect score."
        ],
        [
            {
                "title": "Image Processing",
                "technologies": [
                    "Pytorch"
                ],
                "dates": "Oct 2022",
                "description": [
                    "1st place in ML@Purdue Pok\u00e9mon Classifier Competition using VGG16s, and transfer learning with ResNets.",
                    "Tracked objects with K-means clustering, and created image masks and filters."
                ]
            },
            {
                "description": null,
                "readme": null,
                "prev_commits": [
                    "fixed error in pipeline"
                ],
                "title": "imageProcessing",
                "owner": "abuynits",
                "commits": 1
            },
            "tbd",
            2,
            "Reasoning: The initial commit appears to include large files, particularly images and libraries, with minimal original code contributions that follow. While there are some contributions that show practical coding work, the presence of numerous binary files and an overall lack of significant, iterative development raises concerns about originality. Additionally, the candidate's claim of using techniques like K-means clustering isn't evidently implemented in the visible code, suggesting possible embellishment in their resume. The logs reflect sporadic activity, which may indicate last-minute work or copying rather than consistent, authentic development."
        ]
    ],
    "experience_data": [
        [
            "First Intern at Armada AI building Edge AI Applications for remote compute hardware",
            3,
            "Reasoning: The claim lacks specific details that would validate the candidate's role at Armada AI; it is plausible but requires further context."
        ],
        [
            "Developing spatially aware CV and LLM robotic control methods by generating synthetic data and finetuning models using SFT and DPO",
            4,
            "Reasoning: Generating synthetic data and fine-tuning models with established methods like SFT and DPO is credible, though implementation details are needed for full validation."
        ],
        [
            "Building VideoQA assistant for realtime video Q&A for security camera footage",
            5,
            "Reasoning: Building a VideoQA assistant for real-time video Q&A applications in security contexts is logical and aligns with current technological trends."
        ],
        [
            "Build prompting library with support for customizable prompting formats, single / multi-shot prompting from variable datasets, open/closed source LLMs / custom checkpoints",
            4,
            "Reasoning: Creating a prompting library for various formats is plausible, but the complexity and scope of the claim need more specifics for complete validation."
        ],
        [
            "Conducting research on robotic learning under the supervision of Professor Ahmed Quresh",
            4,
            "Reasoning: Conducting research under a university professor is believable; however, validation of the research's impact or specifics would strengthen the claim."
        ],
        [
            "Extended Unitree simulator to support Unitree B1 Quadruped Robot in Gazebo and PyBullet",
            5,
            "Reasoning: Extending the Unitree simulator to support a specific robot in well-known simulation environments is a valid and credible technical achievement."
        ],
        [
            "Researching Motion Planning in dynamic environments via Network Time Fields and Sign Distance Fields",
            3,
            "Reasoning: The concepts mentioned (Network Time Fields, Sign Distance Fields) are valid; however, without clearer indications of the candidate's direct involvement, this remains uncertain."
        ],
        [
            "Teaching robots to navigate through Purdue with custom knowledge using LLMs, RAG, and vector databases",
            4,
            "Reasoning: Teaching robots navigation using advanced techniques is feasible; specifics about the implementation would help validate this further."
        ],
        [
            "Develop mechatronic / software solutions for quicker manufacturing and assembly of Starlink Satellites",
            5,
            "Reasoning: Developing mechatronic solutions for Starlink Satellites is highly credible given the company's focus and technological landscape."
        ],
        [
            "Prototype satellite assembly cells, working with 6-axis robotics arms, CV, actuators, sensors, & safety hardware",
            4,
            "Reasoning: The claim about prototyping satellite assembly cells is plausible and aligns with industry practices, though details on outcomes would improve the evaluation."
        ],
        [
            "Achieve 80x speedup between PLC & CV software by developing an IP-style communication library",
            5,
            "Reasoning: Achieving significant speedup in software communication via a developed library aligns with technical objectives in automation, making it a credible claim."
        ],
        [
            "Create automation scripts using Python, TypeScript, C/Cpp, and C# / .Net, saving $200k on one instance",
            4,
            "Reasoning: The claim about creating automation scripts across multiple languages is credible; the cost savings mentioned is plausible but may require additional context to verify."
        ]
    ]
}