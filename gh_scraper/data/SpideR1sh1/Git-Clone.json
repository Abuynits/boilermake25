{"description": "Built a minimal Git implementation in Python to replicate core version control features, including repository initialization, object storage using SHA-1 hashing, and commands like commit, add, log, and branch. Explores Git's internal mechanics, focusing on blobs, trees, and commit structures", "readme": "\n# Making My Own Git\n\nThis project is a minimal implementation of Git, developed in Python, that replicates core functionalities of the distributed version control system. It serves as a learning tool to understand how Git works under the hood, including how it stores and manipulates data.\n\n---\n\n## **Features**\n\n1. **Repository Management**:\n   - Create and initialize Git repositories.\n   - Manage `.git` directories with essential metadata and configurations.\n\n2. **Object Storage**:\n   - Implement object storage using SHA-1 hashing for blobs, trees, and commits.\n   - Store and retrieve objects in Git's compressed format.\n\n3. **Basic Git Operations**:\n   - `init`: Create a new repository.\n   - `add`: Stage changes by adding files to the index.\n   - `commit`: Record staged changes in a commit object.\n   - `log`: View commit history.\n   - `cat-file`: Inspect Git objects (e.g., blobs, commits).\n\n4. **Branching**:\n   - Create and switch between branches.\n   - Manage references for branch heads.\n\n5. **Learning Tool**:\n   - Provides detailed insights into Git\u2019s internal structure and concepts like blobs, trees, commits, and refs.\n\n---\n\n## **Installation**\n\n### **Prerequisites**\n- Python (version 3.7 or later)\n\n### **Setup**\n1. Clone this repository:\n   ```bash\n   git clone https://github.com/SpideR1sh1/Git-Clone.git\n   cd wyag\n   ```\n\n2. Run the script directly:\n   ```bash\n   python wyag.py\n   ```\n\n---\n\n## **Implemented Commands**\n\n### Repository Management\n- `wyag init`: Initialize a new Git repository.\n  ```bash\n  python wyag.py init\n  ```\n\n### Object Management\n- `wyag hash-object`: Create a blob object and store it.\n  ```bash\n  echo \"Hello, WYAG!\" | python wyag.py hash-object -w\n  ```\n\n- `wyag cat-file`: Inspect objects in the repository.\n  ```bash\n  python wyag.py cat-file blob <SHA-1>\n  ```\n\n### Staging and Committing\n- `wyag add`: Add files to the staging area.\n  ```bash\n  python wyag.py add <filename>\n  ```\n\n- `wyag commit`: Create a new commit.\n  ```bash\n  python wyag.py commit -m \"Initial commit\"\n  ```\n\n### Viewing History\n- `wyag log`: View the commit history.\n  ```bash\n  python wyag.py log\n  ```\n\n### Branching\n- `wyag branch`: Create or list branches.\n  ```bash\n  python wyag.py branch <branch_name>\n  ```\n\n- `wyag checkout`: Switch to a branch.\n  ```bash\n  python wyag.py checkout <branch_name>\n  ```\n\n---\n\n## **Project Structure**\n\n```\n.\n\u251c\u2500\u2500 wyag.py        # Main script implementing Git functionality\n\u251c\u2500\u2500 objects.py     # Handles Git objects (blobs, trees, commits)\n\u251c\u2500\u2500 repository.py  # Manages repository initialization and configuration\n\u251c\u2500\u2500 utils.py       # Utility functions for file I/O and hashing\n\u2514\u2500\u2500 README.md      # Documentation\n```\n\n---\n\n## **How It Works**\n\n### 1. **Repository Structure**\n- Initializes a `.git` directory containing objects, refs, and configuration files.\n\n### 2. **Object Storage**\n- Objects (blobs, trees, commits) are hashed using SHA-1 and stored in a compressed format in `.git/objects/`.\n\n### 3. **Indexing and Committing**\n- Stages changes by creating a temporary index file.\n- Commits reference staged changes and previous commits.\n\n### 4. **Branch Management**\n- Branches are managed using references in `.git/refs/heads/`.\n\n---\n\n## **Learning Objectives**\n- Understand Git\u2019s internal workings: object storage, indexing, and branching.\n- Explore the data structures (blobs, trees, commits) that form the backbone of Git.\n- Learn how Git efficiently tracks changes and manages history.\n\n---\n\n## **Usage Examples**\n\n### Initialize a Repository\n```bash\npython wyag.py init\n```\n\n### Add and Commit Files\n```bash\necho \"Hello, WYAG!\" > file.txt\npython wyag.py add file.txt\npython wyag.py commit -m \"Added file.txt\"\n```\n\n### View Commit History\n```bash\npython wyag.py log\n```\n\n### Inspect an Object\n```bash\npython wyag.py cat-file blob <SHA-1>\n```\n\n---\n\n## **Planned Features**\n- Add support for merging branches.\n- Implement `diff` to view changes between commits.\n- Extend `log` to show graphical commit trees.\n\n---\n\n### **Acknowledgments**\n- Sincere thanks to **Thibault Polge**, whose *\u201cWrite Yourself a Git\u201d* tutorial served as an invaluable learning resource and foundation for this implementation.\n\n---\n\n## **License**\nThis project is licensed under the MIT License.\n", "prev_commits": ["Update README.md", "Update README.md", "Update README.md", "Update README.md", "Update README.md", "Update README.md", "Update README.md", "Update README.md", "Update README.md", "Update README.md", "Update README.md", "Update README.md", "Update README.md", "Update README.md", "Update README.md", "Update README.md", "Update README.md", "Update README.md", "Update README.md", "Update README.md", "Update README.md", "Update README.md", "Update README.md", "Update README.md", "Update README.md", "Add files via upload", "Update README.md", "Update README.md", "Update README.md", "Update README.md", "Update README.md", "Update README.md", "Update README.md", "Update README.md", "Update README.md"], "title": "Git-Clone", "owner": "SpideR1sh1", "commits": 3}