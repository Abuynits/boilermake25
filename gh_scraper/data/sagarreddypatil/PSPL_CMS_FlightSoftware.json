{"description": "Public mirror of a private repo, not regularly updated", "readme": "# Flight Software for Crater Maker Special\n\nSee write-up on [sagarpatil.me](https://sagarpatil.me/posts/projects/cms-avi-sw)\n\n## Data Sources / Sinks\n\n![data path](https://sagarpatil.me/assets/cms-comm-lines.png)\n\n## Overview\n\n- MCU: RP2040\n- RTOS: FreeRTOS\n- HAL: pico-sdk\n\n## Branches\n\nInformation as of Aug 28, 2023, bother Sagar if you want it updated\n\n- `main`: development branch, contains latest (mostly) tested code, broken code\n  is not allowed, POC is Sagar Patil\n- `cmdnet-secure`: encrypted version of CommandNet, POC is Sagar Patil,\n  information on Confluence\n- `ads13x`: driver development for ADS13xMXX ADCs, POC is Mihir Patil\n- `lte-modem`: LTE modem driver, POC is Jay Jagani\n- `stuff_on_pi`: random stuff from Taylor's Pi, should probably merge it, POC is\n  Sagar Patil\n- `freertos`: exploratory branch for FreeRTOS, POC is Sagar Patil and Charlie Schoettle\n- `vn200`: driver for the VN200 IMU, POC is Charlie Schoettle\n- `tests`: working test framework, but dead branch, POC is Sagar Patil\n- `host-compilation`: dead branch, host compilation for testing purposes, POC is\n  Jay Jagani (?)\n- `camerons-stuff`: Dead branch, old code written for the ATMega328p, archival,\n  POC is Cameron Williams\n\n## Filesystem Hirearchy\n\n```\nPSPL_CMS_Avionics_Code/\n\u251c\u2500\u2500 README.md <- This file\n\u2502\n\u2502\n\u251c\u2500\u2500 src/ <- contains main programs for each board\n\u2502   \u2514\u2500\u2500 someprogram/ <- Main program folder, i.e., for a board\n\u2502       \u251c\u2500\u2500 someprogram.h <- All header stuff for this program\n\u2502       \u251c\u2500\u2500 main.c <- Contains the entrypoint\n\u2502       \u2514\u2500\u2500 other.c <- Other source files\n\u251c\u2500\u2500 lib/ <- common libraries shared by all boards\n\u2502   \u2514\u2500\u2500 example/ <- example library\n\u2502       \u251c\u2500\u2500 example.c\n\u2502       \u2514\u2500\u2500 include/ <- header files, added to include path\n\u2502           \u251c\u2500\u2500 example.h <- top level header, included with `#include <example.h>`\n\u2502           \u2514\u2500\u2500 example/ <- secondary headers\n\u2502               \u2514\u2500\u2500 whatever.h <- included with `#include <example/whatever.h>`\n\u251c\u2500\u2500 device/ <- Same structure as lib, but for device drivers\n\u2502\n\u2502\n\u251c\u2500\u2500 external/ <- Gitignored, for automatically downloaded libraries(in Makefile), contains pico-sdk\n\u251c\u2500\u2500 build/ <- not uploaded to the repo, contains compilation outputs\n\u2502   \u2514\u2500\u2500 bin/ <- contains the files to be uploaded to the boards\n\u2502\n\u2502\n\u251c\u2500\u2500 .clang-format <- file containing autoformatter rules\n\u251c\u2500\u2500 .gitignore <- file containing things to not be uploaded to GitHub(e.g., exe's, build folder)\n\u251c\u2500\u2500 Doxyfile <- Doxygen Documentation Generator Configs, mostly autogenerated\n\u251c\u2500\u2500 CMakeLists.txt <- Main build script\n\u2514\u2500\u2500 Makefile <- User-friendly build script, calls CMake\n```\n\n### Explaining the Contents of `device/` and `/lib`\n\n#### `device/`\nThis folder contains abstractions for interacting with external hardware\n(drivers), and also contains low level RP2040 specific stuff, such as a custom\nimplementation of `spi` under `myspi/`.\n\nAll of the subfolders explained\n- `myspi/` - This exists solely due to FreeRTOS. It uses\n  FreeRTOS mutexes so that multiple tasks can communicate with devices over SPI. For a brief summary of how it works:\n    - Start a DMA transfer when myspi_transfer is called\n    - Yield the current process and wait for a task notification\n    - When the DMA transfer completes, it raises an interrupt\n    - Interrupt sends a notification to the task owning the transfer\n    - Task continues execution\n- `mydma/` - Contains a `memcpy` implementation which uses RP2040's DMA to copy\n  memory without using the CPU. Operation is similar to `myspi`, but instead of\n  data being copied to a peripheral, it's copied across memory on the RP2040.\n- `myuart/` - FreeRTOS supporting UART driver\n\nAll subsequent drivers use the above three drivers. Most of them use `myspi`\n- `ads13x/` - Driver for the ADS13xMXX ADCs\n- `max31856/` - Thermocouple amplifier and ADC driver\n- `w25n01/` - Flash driver\n- `w5500/` - Ethernet driver\n\n## Usage\n\n### Dependencies\n\n- `git` (to clone this repo)\n- `make` (for running CMake)\n- `ninja` (CMake backend)\n- `cmake` (build system)\n- `compdb` (compile database for headers, optional)\n- `gcc-arm-none-eabi` (compiler)\n- `ccache` (compiler cache, optional)\n- `newlib-arm-none-eabi` (C standard library)\n\n### Cloning this Repo\n\nJust clone it like you normally would\n\n### Working on a project\n\nAll Setup and Development Operations information is on Confluence.\n\n## Building\n\nRun `make` or `make build` for a debug build, or `make release` for a release build.\n`make clean` will delete the build folder.\n\nOutput binaries for each board will be present in `build/bin/`. ELF binaries can\nbe found in `build/bin/elf/`\n\n## Remote Dev on Bang Bang Boom Box\n\n### Overview\n\n- Raspberry Pi 4, running Raspberry Pi OS\n- 0-2 Pi Picos connected at any time, ask in #avionics for which boards are\n  connected\n  - Connected over USB\n  - BOOTSEL (puts the Pico into a flashable state) and RUN (reset) connected to\n    Pi's GPIO\n\nThere's Pico A and Pico B, each with a set of bootsel and reset pins.\n\nYou can see how many Pico's are connected by running `lsusb`\n\n### Dependencies\n\n- Zerotier VPN\n- SSH\n- VSCode (optional)\n\n### Setup\n\n- Install Zerotier, ask Sagar for the network ID\n- Join the network\n- SSH into the Pi\n\n**VSCode Setup**\n\n- Install the Remote SSH extension\n- Use the extension to connect to the Pi\n\nFlight software is located in `~/Documents/FlightSoftware_CMS`\n\n### Flashing Code\n\nThere are scripts under `scripts/` that can be used to flash code to the Pi.\nThey are:\n\n- `flash.sh`: Copy the UF2 file to the Pico (this flashes the Pico)\n- `pico.py`: See later, this can be used to bootsel and reset the Pico\n- `router.sh`: (Legacy, do not execute) Used to setup the Pi as a router\n\n1. Decide which Pico you want to use (A or B)\n1. Run `./scripts/pico.py <A/B> bootsel`\n   - Example: `./scripts/pico.py A bootsel`\n   - This will put the Pico into a flashable state\n   - You can verify this by running `lsusb`, you'll see that one of the Pico's\n     is listed as \"Raspberry Pi Pico Boot\" or something similar\n1. Run `./scripts/flash.sh <board-name>`\n   - Example: `./scripts/flash.sh ntp-test`\n   - This will flash the Pico\n1. To see the output, run `cat /dev/ttyACM0`\n   - If multiple Picos are connected, use `ls /dev/ttyACM*` to list all the\n     output ports.\n   - Your Pico can be either `/dev/ttyACM0` or `/dev/ttyACM1`, try both\n\nIf at any point you want to reset the Pico, run `./scripts/pico.py <A/B> reset`\n\n### FAQ\n\n**Q: I'm getting a `Permission Denied` error when running `./scripts/pico.py` or**\n**`./scripts/flash.sh`**\n\nA: Wait a bit longer, the Pico is still booting up. If it's been more than 30\nseconds, ask Sagar.\n\n**Q: Sagar isn't responding, what do I do?**\n\nA: If waiting doesn't fix the permission problem, try this\n\n1. Reset both Picos (doesn't matter if they exist or not)\n   - `./scripts/pico.py A reset`\n   - `./scripts/pico.py B reset`\n1. Run `sudo rm /media/pspl/RPI-RP2*`\n   - This deletes any stray mount points left behind, which is probably what's\n     causing the script to fail\n\n**Q: There aren't any Pico's listed when I run `lsusb`**\n\nA: Reboot the Raspberry Pi by running `sudo reboot`. Exit your terminal, and\nwait a bit for the Pi to reboot. Then SSH back in and try again.\n\n**Q: That didn't work, what do I do?**\n\nA: Contact Sagar and Taylor on the #avionics channel on Slack.\n", "prev_commits": ["add misc info", "update readme", "pyro and pyro cont adc stuff", "new port numbers", "slightly import doxygen", "name it correctly", "fix CI build for once and for all", "stop using inttypes to fix CI build", "try to fix build errors again", "the great purge", "change task list", "add bang bang cmdnet handlers", "try even more", "try again", "try to fix CI build", "add flash storage function", "move globals to other file", "bb loop", "pain", "test code", "bruh", "cleanup", "better error handling", "all values look normal now", "it works now", "make monitor script actually work", "fix minor error in monitor script", "improved monitor script", "print which boards are being compiled", "Merge branch 'main' of https://github.com/Purdue-Space-Program/PSPL_CMS_Avionics_Code", "make myspi work without RTOS running", "someething very fucked up is happening to th eADC", "tc reader feature complete", "bruh moment", "tc reader and data writer, numbers look wrong"], "title": "PSPL_CMS_FlightSoftware", "owner": "sagarreddypatil", "commits": 35}