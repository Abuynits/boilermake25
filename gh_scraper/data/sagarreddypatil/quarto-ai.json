{"description": "minmax AI for the corto board game", "readme": "# Quarto MinMax AI\n\nAI for [this board game](https://en.wikipedia.org/wiki/Quarto_(board_game))\n\n## How to use\n\nadd your moves to board.py\n\nConvention: `((row, col), piece)`\n\nFor each action, you place the piece that the previous player gave you, and you pick the piece for the next player. So the row and col are the position for the piece you're given, not the one you're picking.\n\nrow is 0-indexed from the top, col is 0-indexed from the left\n\n```patch\n@@ -204,6 +204,19 @@ if __name__ == \"__main__\":\n \n     # you play by writing moves here lmao\n     moves = [\n+        ((0, 0), 0b0110),\n+        ((0, 2), 0b1011),\n+        ((0, 1), 0b1111),\n+        ((0, 0), 0b1001),\n+        ((1, 1), 0b0101),\n+        ((3, 2), 0b1100),\n+        ((2, 2), 0b0001),\n+        ((3, 3), 0b0000),\n+        ((2, 0), 0b1000),\n+        ((0, 3), 0b0010),\n+        ((3, 0), 0b1010),\n+        ((1, 2), 0b1101),\n+        ((3, 1), 0b0011),\n     ]\n```\n\nrun `python board.py` to see the AI's moves.\n\nUse `pypy3 board.py` for faster execution.\n\nExample output:\n\n```\n1111 1011 0110 1000 \n---- 1001 1010 ---- \n0000 ---- 1100 ---- \n0010 1101 0101 0001 \n\n1\n(2, 1) piece:  light square small no hole\n```\n\nIt goes\n```\n<board state>\n\n<eval>\n<position> piece: <piece>\n```\n\nIt's evaluated from the perspective of the player who's turn it is to play, after the last move. i.e. if eval is 1, you're winning, if it's -1, you're losing.\n", "prev_commits": ["idk", "add readme", "initial commit"], "title": "quarto-ai", "owner": "sagarreddypatil", "commits": 3}