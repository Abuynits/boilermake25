{"description": "A competition to inspire solutions for autonomous systems through IRL rocket league.", "readme": "# Rocket League\nThis repo contains all the files necessary for the [Rocket League project](https://wiki.purduearc.com/wiki/rocket-league/overview).\nThis project aims to recreate the video game of the same name via a team of\nautonomously controlled RC cars competing against human controlled ones.\n\nThe repo is broken down into several ROS packages, closely matching the system outline:\n\n![System outline](https://wiki.purduearc.com/wiki/rocket-league/assets/images/system-overview.png)\n\n### rktl_autonomy\nThis package contains all code for the \"High Level Planner\" section. It provides\nan interface between ROS and OpenAI Gym, and is therefore capable of running a\ndeep reinforcement learning agent capable of controlling the car.\n\nFor further information see its specific [`README.md`](rktl_autonomy/README.md) file.\n\n### rktl_planner\nThis package contains the \"Mid Level Software\" group. It provides an alternative\nmethod to the `rktl_autonomy` stack to control the car.\n\nFor further information see its specific [`README.md`](rktl_planner/README.md) file.\n\n### rktl_control\nThis package performs several jobs that allow it to move physical cars according\nto commands from either the planning or autonomy code.\n\nSpecifically it has three main components:\n- It filters the raw perception data using either a moving average filter or a\nparticle filter, while also producing estimated odometry (which includes velocity\nin addition to the position given by the raw perception data)\n- It has a closed loop controller which reduces the error between the desired and\nestimated motion of the car by producing control signals.\n- It has a hardware interface, which sends those control signals to the physical cars.\n\nIt also contains several MATLAB scripts that are useful in tuning and validating\nthe Python code used for this project.\n\nFor further information see its specific [`README.md`](rktl_control/README.md) file.\n\n### rktl_perception\nThis package contains the \"Perception\" code. This interfaces with cameras, processes\nthe data, and outputs position estimates for all physical elements on the field.\n\nFor further information see its specific [`README.md`](rktl_perception/README.md) file.\n\n### rktl_sim\nThis contains a simulator, which is used to train the autonomy code.\n\nFor further information see its specific [`README.md`](rktl_sim/README.md) file.\n\n### rktl_msgs\nThis contains custom ROS messages for the project.\n\n### rktl_launch\nThis contains several convenience launch files for running several packages at once.\n\n## Additional Folders / Files\n### docker\nThis contains scripts for building and running the Docker environment used for the project.\nFor more information, see the below **Building and Running the Project** section.\n\n### .github\nThis contains GitHub actions used for continuous integration. Primarily, it automates:\n- building the development Docker container\n- running automated tests on PRs and pushes to main\n\n### start.py\nThis contains a Python script used to launch the production system on the computer\ncart. It launches Docker containers on multiple computers (defined in `hosts.yaml`),\nand launches the necessary ROS nodes inside of them.\n\n## Building and Running the Project\n### Pre-Requisites\nThis project is built on [ROS (Robot Operating System)](https://www.ros.org/)\nYou should be familiar with using ROS on Linux inside Docker through previous\nexperience, or by following our super cool [tutorials](https://wiki.purduearc.com/wiki/tutorials/ros).\n\nThe project runs inside a development Docker container, so the host machine only\nneeds to be able to run Docker. All software pre-requisites are installed in the\nimage.\n\n### Building\nFirst, make sure your code is in the proper place. There is a specific directory\nstructure required, which is:\n```\ncatkin_ws\n -> src\n     -> rocket_league (this repo)\n```\n\nStarting from scratch in the parent directory for `catkin_ws`, run:\n```\nmkdir -p catkin_ws/src\ncd catkin_ws/src\ngit clone git@github.com:purdue-arc/rocket_league.git\n```\n> You should have a different catkin workspace for each project, so if you already\nuse ROS for something else (other than the ARC tutorials), you should name the\nworkspace something different such as `arc_ws` or `rktl_ws`.\n\nRun all future commands inside the `rocket_league` folder.\n\nFirst, pull a mostly built Docker container, and customize it for your machine:\n```\n./docker/docker-build.sh\n```\n\nNext, launch the Docker container:\n```\n./docker/docker-run.sh\n```\nYour terminal will be transported into the container. The directory `~/catkin_ws`\ninside the container is mapped to the workspace wherever you put it, and whatever\nyou named it outside the container. Changes in here are permanent when the container\nexist, but installing software and other actions are all isolated from your main\ncomputer and will be lost when you exit the container.\n\nFinally, build the code:\n```\ncd catkin_ws\ncatkin build\n```\n\nOptionally, run the automated tests:\n```\ncatkin test\n```\n\n### Running\n> This resumes where **Building** left off, so run all these commands in the\ncontainer, not your host computer\n\nTo run the project's simulator and visualizer, run:\n```\nroslaunch rktl_launch rocket_league_sim.launch\n```\n\nTo manually give the car input, run:\n```\nroslaunch rktl_control keyboard_control.launch\n```\n> This must be done while the first command is still running. You can either:\n> - run `./docker/docker-join.sh` in another terminal on your host machine to\ntransport that terminal into the same container\n> - use `CTRL+Z` and `bg` to push the current process into the background, so that\nyou can run another command. (use `fg` to bring it back into the foreground)\n> - use [`tmux`](https://tmuxcheatsheet.com/) to have multiple terminals inside one\n\nTo stop the current process, type `CTRL+C`.\nTo exit the container, simply type `exit` or `CTRL+D`.\n", "prev_commits": ["tested out the randomization of parameters.need to update callback functions", "found problem with bad cmd", "aded debug print", "added debug messages: problem: 0 velocity in car", "udpated sim", "fixed overlap generations of cars", "Merge branch 'main' into sim-refactor", "added debug print, fixed math.random call", "added print statements, fixed bad math sqrt call", "final changes", "no more momments with compilation", "fixed moment with indent, fixed other bugs", "fixed errors with invalid access and checking in hashmap", "fixed error with fetching dictionary", "fixed bugs with bad param naming, identified future bug with attempt to fix with try catch", "refactored the reset function", "reworked reset fucntion and create_cb / delete_cb functions, saving work", "refactored car.py", "fixed bug in bad function call, reworked comments and swapped out reset_cb", "changed the reset_cb function to have an empty param. removed the current =true parameter", "added the configuration function back as it is called by the sim.py", "added comments for car.py", "added better comments and documentation", "undid bad formating", "fixed comments and added better documentation", "worked through comments and changes for these file", "removed generate_car_properties function to reset_cb", "added two more callback functions: delete and create all cars. might be useful for the user...", "simulator node rebuild:", "added params for resetting the ball and passing in velocity and position", "fixed comments", "fixed comments", "fixed grammer, punctuation, capitalization, cleaned and clarified variable names", "added second paramter to get_sim_param, calling all rospy.getparam with this updatead function", "reformated comments, removed confusing comment"], "title": "rocket_league_sim_refactoring", "owner": "abuynits", "commits": 35}